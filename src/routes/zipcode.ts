import { Router } from 'express';
import fs from 'fs';
import path from 'path';

const router = Router();

interface AddressEntry {
    name_th: string;
    amphure: {
        name_th: string;
        province: {
            name_th: string;
        };
    };
    zip_code: string;
}


const rawData = fs.readFileSync(
    path.join(__dirname, '../data/api_revert_tambon_with_amphure_province.json'),
    'utf-8'
);
const addressData: AddressEntry[] = JSON.parse(rawData);

router.get('/:zip', (req, res, next) => {
    try {
        //console.log('üì¶ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', addressData.slice(0, 3));
        const zip = req.params.zip;
        //console.log('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ZIP:', zip);

        const matches = addressData.filter(
            (item) => String(item.zip_code) === zip

        );
        //console.log('üßæ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö:', matches.length);

        if (matches.length === 0) {
            console.warn('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå:', zip);
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡∏ô‡∏µ‡πâ' });
        }

        // ‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å‡∏û‡∏≠

        return res.status(200).json({
            subdistrict: matches[0].name_th,
            district: matches[0].amphure.name_th,
            province: matches[0].amphure.province.name_th,
        });
    } catch (err) {
        console.error('üí• ERROR ‡∏ó‡∏µ‡πà /zipcode/:zip', err);
        next(err);
    }
});

export default router;
